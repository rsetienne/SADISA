jj[[cnt]] <- jj1_2
site_index <- cnt *2 - 1
i_index <- length(params[1,]) - 1
init_p <- list(as.numeric(params[site_index,  i_index]),
as.numeric(params[site_index+1,i_index]))
ii_vals[[cnt]] <- init_p
#lbl par/parlbl hebben we later weer nodig om
# max_lk te doen op de simulatie data
lbl_par <- list(c(1, 2, cont_cnt), c(1, 2, cont_cnt + 1))
parlbl[[cnt]] <- lbl_par
cont_cnt <- cont_cnt + 2
}
theta <- unique(params[,2])
alpha <- unique(params[,3])
phi <- alpha
init_pars <- c(theta, alpha)
PARSMC = init_pars
used_model <- model_spec
if(used_model == "pm") PARSMC <- theta
if(used_model == "pr") PARSMC <- c(theta, phi)
if(used_model == "dd") PARSMC <- c(theta, alpha)
cat(used_model, "\t", model_type, "\t", meta, "\n")
a1 <- SADISA_sim(parsmc = PARSMC,
ii = ii_vals,
jj = jj, #jj = sample sizes
model = c(used_model, "dl"),
mult = 'both',
nsim = 1)
library(SADISA)
library(vegan)
library(DDD)
data<-readRDS("d:/data/ms/SADISA/data.RDS")
k<-1
model_k<-c("dd","dl")
optimmethod_k<-"subplex"
mult_k<-"single"
theta_start_k<-1 #Or 10^2 or 10^5, results in same error
I_start_k<-1 #Or 10^2 or 10^5, results in same error
alpha_start_k<-0.9 #Or -10, same error
abund_k<-list(unname(rowSums(data[[k]])))
initpars_k<-c(theta_start_k,alpha_start_k,I_start_k)
labelpars_k<-c(1,2,3)
idpars_k<-c(1,1,1)
case_1<-try(SADISA_ML(abund = abund_k,initpars = initpars_k,labelpars = labelpars_k,idpars = idpars_k,model=model_k,mult=mult_k,optimmethod = optimmethod_k),outFile="SADISA_ML_errors.outFile")
case_1[[1]]
install.packages("D:/data/Ms/DDD/DDD_3.8.tar.gz", repos = NULL, type = "source")
library(SADISA)
library(vegan)
library(DDD)
data<-readRDS("d:/data/ms/SADISA/data.RDS")
k<-1
model_k<-c("dd","dl")
optimmethod_k<-"subplex"
mult_k<-"single"
theta_start_k<-1 #Or 10^2 or 10^5, results in same error
I_start_k<-1 #Or 10^2 or 10^5, results in same error
alpha_start_k<-0.9 #Or -10, same error
abund_k<-list(unname(rowSums(data[[k]])))
initpars_k<-c(theta_start_k,alpha_start_k,I_start_k)
labelpars_k<-c(1,2,3)
idpars_k<-c(1,1,1)
case_1<-try(SADISA_ML(abund = abund_k,initpars = initpars_k,labelpars = labelpars_k,idpars = idpars_k,model=model_k,mult=mult_k,optimmethod = optimmethod_k),outFile="SADISA_ML_errors.outFile")
case_1[[1]]
library("DDD", lib.loc="C:/Program Files/R/R-devel/library")
detach("package:DDD", unload=TRUE)
nn <- datasets$dset2.abunvec[[i]];
nn
dim(nn)
length(nn)
nn <- datasets$dset3.abunvec[[i]];
nn
length(nn)
length(nn[[1])
length(nn[[1]])
length(nn[[1]][[1]])
length(nn[[1]][[1]][[1]])
cat('\n\nTesting multiple-samples model (Table 4):\n');
for(i in 1:11)
{
nn <- datasets$dset2.abunvec[[i]];
po <- fitresults$fit4.parsopt[[i]];
result <- SADISA_loglik(abund = nn,pars = po,model = c('pm','dl'), mult = 'ms');
#cat('\nThe difference is:',result - fitresults$fit4.llikopt[[i]],'  ');
testthat::expect_equal(result,fitresults$fit4.llikopt[[i]],tolerance = tol);
}
devtools::load_all(".")
cat('\n\nTesting multiple-samples model (Table 4):\n');
for(i in 1:11)
{
nn <- datasets$dset2.abunvec[[i]];
po <- fitresults$fit4.parsopt[[i]];
result <- SADISA_loglik(abund = nn,pars = po,model = c('pm','dl'), mult = 'ms');
#cat('\nThe difference is:',result - fitresults$fit4.llikopt[[i]],'  ');
testthat::expect_equal(result,fitresults$fit4.llikopt[[i]],tolerance = tol);
}
cat('\n\nTesting multiple-samples model for protracted speciation (new):\n');
ph <- c(10,100,1000)
llik <- rbind(
c(-2.7436e+03,-1.6509e+03,-1.2287e+03),
c(-2.0773e+03,-1.1438e+03,-7.9608e+02),
c(-2.0670e+03,-1.1337e+03,-7.8593e+02),
c(-2.1189e+03,-1.1563e+03,-7.9584e+02),
c(-2.1544e+03,-1.1734e+03,-8.0533e+02),
c(-2.1587e+03,-1.1772e+03,-8.0737e+02),
c(-2.1064e+03,-1.1455e+03,-7.8261e+02),
c(-2.0874e+03,-1.1397e+03,-7.8053e+02),
c(-2.0451e+03,-1.1162e+03,-7.6576e+02),
c(-2.0801e+03,-1.1334e+03,-7.7544e+02),
c(-2.1001e+03,-1.1558e+03,-8.0473e+02))
for(i in 1:11)
{
for(k in 1:3)
{
nn <- datasets$dset2.abunvec[[i]];
po <- list();
for(j in 1:3) {po[[j]] <- c(100,ph[k],50)}
result <- SADISA_loglik(abund = nn,pars = po,model = c('pr','dl'), mult = 'ms');
testthat::expect_equal(result,llik[i,k],tolerance = tol);
}
}
cat('\n\nTesting multiple-samples model for density-dependence (new):\n');
for(i in 1:11)
{
nn <- datasets$dset2.abunvec[[i]];
po <- fitresults$fit4.parsopt[[i]];
for(j in 1:3) {po[[j]] <- c(po[[j]][1],1e-6,po[[j]][-1])}
result <- SADISA_loglik(abund = nn,pars = po,model = c('dd','dl'), mult = 'ms');
#cat('\nThe difference is:',result - fitresults$fit4.llikopt[[i]],'  ');
testthat::expect_equal(result,fitresults$fit4.llikopt[[i]],tolerance = tol);
}
cat('\n\nTesting multiple-samples model for density-dependence (new):\n');
al <- c(-0.5,0,0.5)
llik <- rbind(
c(-1.3065e+03,-1.1669e+03,-1.1384e+03),
c(-8.6008e+02,-7.4643e+02,-7.1899e+02),
c(-8.5003e+02,-7.3598e+02,-7.0714e+02),
c(-8.6279e+02,-7.4400e+02,-7.1155e+02),
c(-8.7401e+02,-7.5251e+02,-7.1812e+02),
c(-8.7646e+02,-7.5329e+02,-7.1616e+02),
c(-8.5023e+02,-7.2892e+02,-6.9198e+02),
c(-8.4722e+02,-7.2693e+02,-6.9118e+02),
c(-8.3058e+02,-7.1367e+02,-6.7994e+02),
c(-8.4190e+02,-7.2173e+02,-6.8463e+02),
c(-8.6966e+02,-7.5544e+02,-7.2795e+02))
for(i in 1:11)
{
for(k in 1:3)
{
nn <- datasets$dset2.abunvec[[i]];
po <- list();
for(j in 1:3) {po[[j]] <- c(100,al[k],50)}
result <- SADISA_loglik(abund = nn,pars = po,model = c('dd','dl'), mult = 'ms');
testthat::expect_equal(result,llik[i,k],tolerance = tol);
}
}
}
cat('\n\nTesting multiple-samples model for density-dependence (new):\n');
al <- c(-0.5,0,0.5)
llik <- rbind(
c(-1.3065e+03,-1.1669e+03,-1.1384e+03),
c(-8.6008e+02,-7.4643e+02,-7.1899e+02),
c(-8.5003e+02,-7.3598e+02,-7.0714e+02),
c(-8.6279e+02,-7.4400e+02,-7.1155e+02),
c(-8.7401e+02,-7.5251e+02,-7.1812e+02),
c(-8.7646e+02,-7.5329e+02,-7.1616e+02),
c(-8.5023e+02,-7.2892e+02,-6.9198e+02),
c(-8.4722e+02,-7.2693e+02,-6.9118e+02),
c(-8.3058e+02,-7.1367e+02,-6.7994e+02),
c(-8.4190e+02,-7.2173e+02,-6.8463e+02),
c(-8.6966e+02,-7.5544e+02,-7.2795e+02))
for(i in 1:11)
{
for(k in 1:3)
{
nn <- datasets$dset2.abunvec[[i]];
po <- list();
for(j in 1:3) {po[[j]] <- c(100,al[k],50)}
result <- SADISA_loglik(abund = nn,pars = po,model = c('dd','dl'), mult = 'ms');
testthat::expect_equal(result,llik[i,k],tolerance = tol);
}
}
library(SADISA)
tol
library(SADISA)
library(SADISA)
library(SADISA)
library(SADISA)
library(SADISA)
devtools::load_all(".")
require(stringr)
package_path <- "/Users/janzen/Dropbox/Projects/Zotz/SADISA_1.1.26/R/"
f <- list.files(package_path)
for(x in f) {
source(paste0(package_path, x))
}
meta_comm <- list(c(5,7),  # mexico pre
c(6,8),  # mexico post
c(3,4),  # central america
c(9, 11:21), # Amazonia 1996, 10 = 2000
c(9, 10, 12:21)) # Amazonia 2000, 11 = 1996
names_meta <- c("Yucatan_1","Yucatan_2","Panama","Amazonia_1996","Amazonia_2000")
v <- read.table("d:/data/ms/SADISA/Species_list_taxonstand_corrected.txt", header = T)
# select only epiphytes:
v <- subset(v, v$Hemi == "E")
# de parameter waarden zoals geschat voor de empirische data
# om straks de ML mee te starten.
x <- "d:/data/ms/SADISA/dd_free_Panama.txt"
params <- read.table(paste0(x))
params <- subset(params, params[,1] == unique(params[,1])[1])
# wat code om te achterhalen wat het model is etc:
vx <- stringr::str_split(x, "_")
model_spec = vx[[1]][1]
if(!is.na(pmatch("basic", model_spec))) {
vv <- stringr::str_split(model_spec, "basic")
model_spec <- vv[[1]][2]
}
model_type = vx[[1]][2]
meta <- c()
if(length(vx[[1]]) == 3) meta <- "Panama"
if(length(vx[[1]]) == 4) {
to_add <- stringr::str_split(vx[[1]][4],".txt")[[1]][1]
meta <- paste0(vx[[1]][3],"_", to_add)
}
num_meta <- which(meta == names_meta)
selected <- meta_comm[[num_meta]]
animal_guild <- subset(v, v$Dispersal == "a")
wind_guild <- subset(v, v$Dispersal == "w")
animal_guild <- animal_guild[,selected]
wind_guild <- wind_guild[,selected]
# calculate the row sums, if these are zero, exclude that line
a <- rowSums(animal_guild)
animal_guild <- animal_guild[which(a > 0),]
# calculate the row sums, if these are zero, exclude that line
a <- rowSums(wind_guild)
wind_guild <- wind_guild[which(a > 0),]
# set up van de verschillende lijsten
all_sites <- list()
ii_vals <- list()
parlbl <- list()
jj <- list()
v_names <- colnames(v)
cont_cnt <- 3
for(cnt in 1:length(selected)) {
b1 <- animal_guild[,cnt]
b2 <- wind_guild[,cnt]
vv1 <- as.numeric(unlist(b1))
vv2 <- as.numeric(unlist(b2))
jj1 <- sum(vv1)
jj2 <- sum(vv2)
guilds <- list(vv1, vv2)
jj1_2 <- list(jj1,jj2)
all_sites[[cnt]] <- guilds
jj[[cnt]] <- jj1_2
site_index <- cnt *2 - 1
i_index <- length(params[1,]) - 1
init_p <- list(as.numeric(params[site_index,  i_index]),
as.numeric(params[site_index+1,i_index]))
ii_vals[[cnt]] <- init_p
#lbl par/parlbl hebben we later weer nodig om
# max_lk te doen op de simulatie data
lbl_par <- list(c(1, 2, cont_cnt), c(1, 2, cont_cnt + 1))
parlbl[[cnt]] <- lbl_par
cont_cnt <- cont_cnt + 2
}
# de initiele waarden:
theta <- unique(params[,2])
alpha <- unique(params[,3])
phi <- alpha # deze hebben we in dit geval niet nodig
init_pars <- c(theta, alpha)
PARSMC = init_pars
used_model <- model_spec
if(used_model == "pm") PARSMC <- theta
if(used_model == "pr") PARSMC <- c(theta, phi)
if(used_model == "dd") PARSMC <- c(theta, alpha)
cat(used_model, "\t", model_type, "\t", meta, "\n")
cat(PARSMC, "\n")
for(local_seed in 1:1) {
#set.seed(81234)
set.seed(local_seed)
nsim <- 6
a1 <- SADISA_sim(parsmc = PARSMC,
ii = ii_vals,
jj = jj, #jj = sample sizes
model = c("dd", "dl"),
mult = 'both',
nsim = nsim)
for(guild in 1:1) {
for(j in 1:nsim) {
is_non_zero <- rep(0, length(a1[[1]][[1]][[guild]]))
for(s in 1:2) {
x <- a1[[j]][[s]][[guild]]
y <- x > 0
is_non_zero[y] <- 1
}
if(sum(is_non_zero, na.rm = T) != length(is_non_zero)) {
cat("seed =",local_seed, "guild =",guild, "simulation =",j, "detected zeros\n")
break
}
}
}
}
which(c(1:3) ==0)
is.null(which(c(1:3) ==0))
length(which(c(1:3) ==0))
probs <- dnbinom(1:nmax, size = nn[i], prob = 1 - qq[i])
nmax <- 100000
probs <- dnbinom(1:nmax, size = nn[i], prob = 1 - qq[i])
which0 <- which(probs <= 0)
probs <- dnbinom(1:nmax, size = nn[i], prob = 1 - qq[i])
probs
devtools::load_all(".")
for(local_seed in 1:1) {
#set.seed(81234)
set.seed(local_seed)
nsim <- 6
a1 <- SADISA_sim(parsmc = PARSMC,
ii = ii_vals,
jj = jj, #jj = sample sizes
model = c("dd", "dl"),
mult = 'both',
nsim = nsim)
for(guild in 1:1) {
for(j in 1:nsim) {
is_non_zero <- rep(0, length(a1[[1]][[1]][[guild]]))
for(s in 1:2) {
x <- a1[[j]][[s]][[guild]]
y <- x > 0
is_non_zero[y] <- 1
}
if(sum(is_non_zero, na.rm = T) != length(is_non_zero)) {
cat("seed =",local_seed, "guild =",guild, "simulation =",j, "detected zeros\n")
break
}
}
}
}
devtools::load_all(".")
for(local_seed in 1:1) {
#set.seed(81234)
set.seed(local_seed)
nsim <- 6
a1 <- SADISA_sim(parsmc = PARSMC,
ii = ii_vals,
jj = jj, #jj = sample sizes
model = c("dd", "dl"),
mult = 'both',
nsim = nsim)
for(guild in 1:1) {
for(j in 1:nsim) {
is_non_zero <- rep(0, length(a1[[1]][[1]][[guild]]))
for(s in 1:2) {
x <- a1[[j]][[s]][[guild]]
y <- x > 0
is_non_zero[y] <- 1
}
if(sum(is_non_zero, na.rm = T) != length(is_non_zero)) {
cat("seed =",local_seed, "guild =",guild, "simulation =",j, "detected zeros\n")
break
}
}
}
}
probs = dnbinom(1:10000, size = 1.144179e-16, prob = 0.001487324)
which(probs <= 0)
which(is.na(probs <= 0))
which(is.nan(probs <= 0))
sum(probs > 0)
sample(1:10000,prob = probs)
which0 <- which(probs <= 0)
if(length(which0) > 0)
{
nmax <- min(which0) - 1
}
print(nmax)
sample(1:10000,prob = probs[1:nmax])
sample(1:10000,prob = probs[1:10000])
?sample
devtools::load_all(".")
for(local_seed in 1:1) {
#set.seed(81234)
set.seed(local_seed)
nsim <- 6
a1 <- SADISA_sim(parsmc = PARSMC,
ii = ii_vals,
jj = jj, #jj = sample sizes
model = c("dd", "dl"),
mult = 'both',
nsim = nsim)
for(guild in 1:1) {
for(j in 1:nsim) {
is_non_zero <- rep(0, length(a1[[1]][[1]][[guild]]))
for(s in 1:2) {
x <- a1[[j]][[s]][[guild]]
y <- x > 0
is_non_zero[y] <- 1
}
if(sum(is_non_zero, na.rm = T) != length(is_non_zero)) {
cat("seed =",local_seed, "guild =",guild, "simulation =",j, "detected zeros\n")
break
}
}
}
}
devtools::load_all(".")
for(local_seed in 1:1) {
#set.seed(81234)
set.seed(local_seed)
nsim <- 6
a1 <- SADISA_sim(parsmc = PARSMC,
ii = ii_vals,
jj = jj, #jj = sample sizes
model = c("dd", "dl"),
mult = 'both',
nsim = nsim)
for(guild in 1:1) {
for(j in 1:nsim) {
is_non_zero <- rep(0, length(a1[[1]][[1]][[guild]]))
for(s in 1:2) {
x <- a1[[j]][[s]][[guild]]
y <- x > 0
is_non_zero[y] <- 1
}
if(sum(is_non_zero, na.rm = T) != length(is_non_zero)) {
cat("seed =",local_seed, "guild =",guild, "simulation =",j, "detected zeros\n")
break
}
}
}
}
devtools::load_all(".")
for(local_seed in 1:1) {
#set.seed(81234)
set.seed(local_seed)
nsim <- 6
a1 <- SADISA_sim(parsmc = PARSMC,
ii = ii_vals,
jj = jj, #jj = sample sizes
model = c("dd", "dl"),
mult = 'both',
nsim = nsim)
for(guild in 1:1) {
for(j in 1:nsim) {
is_non_zero <- rep(0, length(a1[[1]][[1]][[guild]]))
for(s in 1:2) {
x <- a1[[j]][[s]][[guild]]
y <- x > 0
is_non_zero[y] <- 1
}
if(sum(is_non_zero, na.rm = T) != length(is_non_zero)) {
cat("seed =",local_seed, "guild =",guild, "simulation =",j, "detected zeros\n")
break
}
}
}
}
library(SADISA)
#set.seed(81234)
set.seed(local_seed)
for(local_seed in 1:1) {
#set.seed(81234)
set.seed(local_seed)
nsim <- 10
a1 <- SADISA_sim(parsmc = PARSMC,
ii = ii_vals,
jj = jj, #jj = sample sizes
model = c("dd", "dl"),
mult = 'both',
nsim = nsim)
for(guild in 1:2) {
for(j in 1:nsim) {
is_non_zero <- rep(0, length(a1[[1]][[1]][[guild]]))
for(s in 1:2) {
x <- a1[[j]][[s]][[guild]]
y <- x > 0
is_non_zero[y] <- 1
}
if(sum(is_non_zero, na.rm = T) != length(is_non_zero)) {
cat("seed =",local_seed, "guild =",guild, "simulation =",j, "detected zeros\n")
break
}
}
}
}
for(local_seed in 1:1) {
#set.seed(81234)
set.seed(local_seed)
nsim <- 100
a1 <- SADISA_sim(parsmc = PARSMC,
ii = ii_vals,
jj = jj, #jj = sample sizes
model = c("dd", "dl"),
mult = 'both',
nsim = nsim)
for(guild in 1:2) {
for(j in 1:nsim) {
is_non_zero <- rep(0, length(a1[[1]][[1]][[guild]]))
for(s in 1:2) {
x <- a1[[j]][[s]][[guild]]
y <- x > 0
is_non_zero[y] <- 1
}
if(sum(is_non_zero, na.rm = T) != length(is_non_zero)) {
cat("seed =",local_seed, "guild =",guild, "simulation =",j, "detected zeros\n")
break
}
}
}
}
pracma::sigmoid(1:10,a = 0,b = 1)
pracma::sigmoid(1:10,a = 0,b = 10)
library(SADISA)
library(SADISA)
